# /etc/init/unicorn-manager.conf - manage a herd of Unicorns

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Unicorn instances with
# Upstart, Ubuntu's native service management tool.
#
# See unicorn.conf for how to manage a single Unicorn instance.
#
# Use "stop unicorn-manager" to stop all Unicorn instances.
# Use "start unicorn-manager" to start all instances.
# Use "restart unicorn-manager" to restart all instances.
# Crazy, right?
#

description "Manages the set of unicorn processes"

# This starts upon bootup and stops on shutdown
start on runlevel [2345]
stop on runlevel [06]

# Set this to the number of Unicorn processes you want
# to run on this machine
env UNICORN_CONF="/etc/unicorn.conf"

pre-start script
  for i in `cat $UNICORN_CONF`; do
    app=`echo $i | cut -d , -f 1`
    logger -t "unicorn-manager" "Starting $app"
    start unicorn app=$app
  done
end script

~/staging
â˜¼  cat /etc/init/unicorn.conf
# /etc/init/unicorn.conf - Unicorn config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Unicorn instances with
# Upstart, Ubuntu's native service management tool.
#
# Save this config as /etc/init/unicorn.conf then manage Unicorn with:
#   sudo start unicorn app=PATH_TO_APP
#   sudo stop unicorn app=PATH_TO_APP
#   sudo status unicorn app=PATH_TO_APP
#
# or use the service command:
#   sudo service unicorn {start,stop,restart,status}
#

description "Unicorn Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping unicorn-manager or runlevel [06])

# change apps to match your deployment user if you want to use this as a less privileged user (recommended!)
setuid dylansm
setgid dylansm

respawn
respawn limit 3 30

instance ${app}

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv/rvm
# quoted heredoc to tell /bin/sh not to interpret
# variables
exec /bin/bash <<'EOT'
  # set HOME to the setuid user's home, there doesn't seem to be a better, portable way
  export HOME="$(eval echo ~$(id -un))"

  cd $app

  if [ -d "$HOME/.rbenv/bin" ]; then
    export PATH="$HOME/.rbenv/bin:$PATH"
  elif [ -f  /etc/profile.d/rvm.sh ]; then
    source /etc/profile.d/rvm.sh
  elif [ -f /usr/local/rvm/scripts/rvm ]; then
    source /etc/profile.d/rvm.sh
  elif [ -f "$HOME/.rvm/scripts/rvm" ]; then
    source "$HOME/.rvm/scripts/rvm"
  elif [ -f /usr/local/share/chruby/chruby.sh ]; then
    source /usr/local/share/chruby/chruby.sh
    if [ -f /usr/local/share/chruby/auto.sh ]; then
      source /usr/local/share/chruby/auto.sh
    fi
    # if you aren't using auto, set your version here
    # chruby 2.0.0
  fi

  logger -t unicorn "Starting server: $app"

  if [ -e "$app/config/rails_env_staging" ]; then
    export RAILS_ENV="staging"
  elif [ -e "$app/config/rails_env_production" ]; then
    export RAILS_ENV="production"
  elif [ -e "$app/config/rack_env_staging" ]; then
    export DEPLOY_ENV=staging
  elif [ -e "$app/config/rack_env_production" ]; then
    export DEPLOY_ENV=production
  fi

  exec bundle exec unicorn -c config/unicorn.rb -E production -D
EOT
end script
